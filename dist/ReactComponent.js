(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('svelte/internal'), require('react'), require('react-dom'), require('svelte')) :
	typeof define === 'function' && define.amd ? define(['svelte/internal', 'react', 'react-dom', 'svelte'], factory) :
	(global = global || self, global.ReactComponent = factory(global.internal, global.React, global.ReactDOM, global.svelte));
}(this, function (internal, React, ReactDOM, svelte) { 'use strict';

	/* ReactComponent.svelte generated by Svelte v3.29.0 */

	function create_fragment(ctx) {
		let div;

		return {
			c() {
				div = internal.element("div");
			},
			m(target, anchor) {
				internal.insert(target, div, anchor);
				/*div_binding*/ ctx[1](div);
			},
			p: internal.noop,
			i: internal.noop,
			o: internal.noop,
			d(detaching) {
				if (detaching) internal.detach(div);
				/*div_binding*/ ctx[1](null);
			}
		};
	}

	function instance($$self, $$props, $$invalidate) {
		let container;

		svelte.afterUpdate(() => {
			const { this: component, children, ...props } = $$props;
			ReactDOM.render(React.createElement(component, props, children), container);
		});

		svelte.onDestroy(() => {
			ReactDOM.unmountComponentAtNode(container);
		});

		function div_binding($$value) {
			internal.binding_callbacks[$$value ? "unshift" : "push"](() => {
				container = $$value;
				$$invalidate(0, container);
			});
		}

		$$self.$$set = $$new_props => {
			$$invalidate(2, $$props = internal.assign(internal.assign({}, $$props), internal.exclude_internal_props($$new_props)));
		};

		$$props = internal.exclude_internal_props($$props);
		return [container, div_binding];
	}

	class ReactComponent extends internal.SvelteComponent {
		constructor(options) {
			super();
			internal.init(this, options, instance, create_fragment, internal.safe_not_equal, {});
		}
	}

	return ReactComponent;

}));
